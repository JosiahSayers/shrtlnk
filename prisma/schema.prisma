generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  id          String       @id @default(uuid())
  name        String
  website     String?
  apiKey      String       @unique
  status      String       @default("Valid")
  totalLoads  Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  User        User         @relation(fields: [userId], references: [id])
  shrtlnks    Shrtlnk[]
  blockedUrls BlockedUrl[]

  @@unique([id, userId], name: "idAndUserId")
  @@index([createdAt], type: Hash)
}

model Shrtlnk {
  id            String        @id @default(uuid())
  key           String        @unique
  url           String
  eligibleForAd Boolean       @default(true)
  createdAt     DateTime      @default(now())
  applicationId String?
  application   Application?  @relation(fields: [applicationId], references: [id], onDelete: SetNull)
  loads         ShrtlnkLoad[]

  @@index([createdAt], type: Hash)
}

model ShrtlnkLoad {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  shrtlnkId String
  shrtlnk   Shrtlnk  @relation(fields: [shrtlnkId], references: [id], onDelete: Cascade)

  @@index([createdAt], type: Hash)
}

model BlockedUrl {
  id            String      @id @default(uuid())
  url           String?
  createdAt     DateTime    @default(now())
  linkCreatedAt DateTime?
  applicationId String
  foundBy       String?
  application   Application @relation(fields: [applicationId], references: [id])
}

model CleanLinksLog {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  completedAt       DateTime?
  totalThreatsFound Int?
  status            String?
}

model User {
  id                      String          @id @default(uuid())
  email                   String          @unique
  firstName               String
  lastName                String
  password                String
  dotnetPassword          String?
  dotnetSaltArray         String?
  createdAt               DateTime        @default(now())
  lastLoginSuccess        DateTime        @default(now())
  lastLoginAttempt        DateTime        @default(now())
  role                    String
  verified                Boolean
  applications            Application[]
  initiatedImpersonations Impersonation[] @relation("impersonator")
  impersonations          Impersonation[] @relation("impersonated")
  passwordResets          PasswordReset[] @relation("password_reset")
  feedbackSubmitted       Feedback[]      @relation("feedback_submission")
  feedbackAcknowledged    Feedback[]      @relation("feedback_acknowledge")

  @@index([createdAt], type: Hash)
}

model PasswordReset {
  id        String    @id @default(uuid())
  key       String    @unique
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  valid     Boolean   @default(true)
  userId    String
  user      User      @relation("password_reset", fields: [userId], references: [id], onDelete: Cascade)
}

model Impersonation {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  endedAt        DateTime?
  impersonatorId String
  impersonator   User      @relation("impersonator", fields: [impersonatorId], references: [id], onDelete: Cascade)
  impersonatedId String
  impersonated   User      @relation("impersonated", fields: [impersonatedId], references: [id], onDelete: Cascade)
}

enum FeedbackType {
  bugReport
  featureRequest
  suggestion
  other
}

model Feedback {
  id                   String       @id @default(uuid())
  text                 String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  from                 User         @relation("feedback_submission", fields: [fromId], references: [id])
  fromId               String
  type                 FeedbackType
  acknowledgedAt       DateTime?
  acknowledgedBy       User?        @relation("feedback_acknowledge", fields: [acknowledgedByUserId], references: [id])
  acknowledgedByUserId String?
}
